{"type":"struct","file_path":"../handler/handler_chirps_create.go","struct":{"name":"Chirp","fields":[{"name":"ID","type":"uuid.UUID","tag":"json:\"id\""},{"name":"CreatedAt","type":"time.Time","tag":"json:\"created_at\""},{"name":"UpdatedAt","type":"time.Time","tag":"json:\"updated_at\""},{"name":"UserID","type":"uuid.UUID","tag":"json:\"user_id\""},{"name":"Body","type":"string","tag":"json:\"body\""}]}}
{"type":"function","file_path":"../handler/handler_chirps_create.go","function":{"name":"HandlerChirpsCreate","signature":"func HandlerChirpsCreate(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype parameters struct {\n\t\tBody string `json:\"body\"`\n\t}\n\n\ttoken, err := auth.GetBearerToken(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't find JWT\", err)\n\t\treturn\n\t}\n\tuserID, err := auth.ValidateJWT(token, cfg.JwtSecret)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't validate JWT\", err)\n\t\treturn\n\t}\n\n\tdecoder := json.NewDecoder(r.Body)\n\tparams := parameters{}\n\terr = decoder.Decode(\u0026params)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't decode parameters\", err)\n\t\treturn\n\t}\n\n\tcleaned, err := validateChirp(params.Body)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, err.Error(), err)\n\t\treturn\n\t}\n\n\tchirp, err := cfg.Db.CreateChirp(r.Context(), database.CreateChirpParams{\n\t\tBody:   cleaned,\n\t\tUserID: userID,\n\t})\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't create chirp\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusCreated, Chirp{\n\t\tID:        chirp.ID,\n\t\tCreatedAt: chirp.CreatedAt,\n\t\tUpdatedAt: chirp.UpdatedAt,\n\t\tBody:      chirp.Body,\n\t\tUserID:    chirp.UserID,\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/handler_chirps_create.go","struct":{"name":"parameters","fields":[{"name":"Body","type":"string","tag":"json:\"body\""}]}}
{"type":"function","file_path":"../handler/handler_chirps_create.go","function":{"name":"validateChirp","signature":"func validateChirp(body string) (string, error)","parameters":[{"name":"body","type":"string"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tconst maxChirpLength = 140\n\tif len(body) \u003e maxChirpLength {\n\t\treturn \"\", errors.New(\"Chirp is too long\")\n\t}\n\n\tbadWords := map[string]struct{}{\n\t\t\"kerfuffle\": {},\n\t\t\"sharbert\":  {},\n\t\t\"fornax\":    {},\n\t}\n\tcleaned := getCleanedBody(body, badWords)\n\treturn cleaned, nil\n}\n"}}
{"type":"constant","file_path":"../handler/handler_chirps_create.go","constant":{"names":["maxChirpLength"],"value":"140"}}
{"type":"function","file_path":"../handler/handler_chirps_create.go","function":{"name":"getCleanedBody","signature":"func getCleanedBody(body string, badWords map[string]struct{}) string","parameters":[{"name":"body","type":"string"},{"name":"badWords","type":"map[string]struct{}"}],"returns":[{"name":"","type":"string"}],"body":"\n\twords := strings.Split(body, \" \")\n\tfor i, word := range words {\n\t\tloweredWord := strings.ToLower(word)\n\t\tif _, ok := badWords[loweredWord]; ok {\n\t\t\twords[i] = \"****\"\n\t\t}\n\t}\n\tcleaned := strings.Join(words, \" \")\n\treturn cleaned\n}\n"}}
{"type":"function","file_path":"../handler/handler_chirps_delete.go","function":{"name":"HandlerChirpsDelete","signature":"func HandlerChirpsDelete(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tchirpIDString := r.PathValue(\"chirpID\")\n\tchirpID, err := uuid.Parse(chirpIDString)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, \"Invalid chirp ID\", err)\n\t\treturn\n\t}\n\n\ttoken, err := auth.GetBearerToken(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't find JWT\", err)\n\t\treturn\n\t}\n\tuserID, err := auth.ValidateJWT(token, cfg.JwtSecret)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't validate JWT\", err)\n\t\treturn\n\t}\n\n\tdbChirp, err := cfg.Db.GetChirp(r.Context(), chirpID)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusNotFound, \"Couldn't get chirp\", err)\n\t\treturn\n\t}\n\tif dbChirp.UserID != userID {\n\t\trespondWithError(w, http.StatusForbidden, \"You can't delete this chirp\", err)\n\t\treturn\n\t}\n\n\terr = cfg.Db.DeleteChirp(r.Context(), chirpID)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't delete chirp\", err)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusNoContent)\n}\n"}}
{"type":"function","file_path":"../handler/handler_chirps_get.go","function":{"name":"HandlerChirpsGet","signature":"func HandlerChirpsGet(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tchirpIDString := r.PathValue(\"chirpID\")\n\tchirpID, err := uuid.Parse(chirpIDString)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, \"Invalid chirp ID\", err)\n\t\treturn\n\t}\n\n\tdbChirp, err := cfg.Db.GetChirp(r.Context(), chirpID)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusNotFound, \"Couldn't get chirp\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusOK, Chirp{\n\t\tID:        dbChirp.ID,\n\t\tCreatedAt: dbChirp.CreatedAt,\n\t\tUpdatedAt: dbChirp.UpdatedAt,\n\t\tUserID:    dbChirp.UserID,\n\t\tBody:      dbChirp.Body,\n\t})\n}\n"}}
{"type":"function","file_path":"../handler/handler_chirps_get.go","function":{"name":"HandlerChirpsRetrieve","signature":"func HandlerChirpsRetrieve(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tdbChirps, err := cfg.Db.GetChirps(r.Context())\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't retrieve chirps\", err)\n\t\treturn\n\t}\n\n\tchirps := []Chirp{}\n\tfor _, dbChirp := range dbChirps {\n\t\tchirps = append(chirps, Chirp{\n\t\t\tID:        dbChirp.ID,\n\t\t\tCreatedAt: dbChirp.CreatedAt,\n\t\t\tUpdatedAt: dbChirp.UpdatedAt,\n\t\t\tUserID:    dbChirp.UserID,\n\t\t\tBody:      dbChirp.Body,\n\t\t})\n\t}\n\n\trespondWithJSON(w, http.StatusOK, chirps)\n}\n"}}
{"type":"function","file_path":"../handler/handler_login.go","function":{"name":"HandlerLogin","signature":"func HandlerLogin(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype parameters struct {\n\t\tPassword string `json:\"password\"`\n\t\tEmail    string `json:\"email\"`\n\t}\n\ttype response struct {\n\t\tUser\n\t\tToken        string `json:\"token\"`\n\t\tRefreshToken string `json:\"refresh_token\"`\n\t}\n\n\tdecoder := json.NewDecoder(r.Body)\n\tparams := parameters{}\n\terr := decoder.Decode(\u0026params)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't decode parameters\", err)\n\t\treturn\n\t}\n\n\tuser, err := cfg.Db.GetUserByEmail(r.Context(), params.Email)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Incorrect email or password\", err)\n\t\treturn\n\t}\n\n\t_, err = auth.CheckPasswordHash(params.Password, user.HashedPassword)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Incorrect email or password\", err)\n\t\treturn\n\t}\n\n\taccessToken, err := auth.MakeJWT(\n\t\tuser.ID,\n\t\tcfg.JwtSecret,\n\t\ttime.Hour,\n\t)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't create access JWT\", err)\n\t\treturn\n\t}\n\n\trefreshToken := auth.MakeRefreshToken()\n\n\t_, err = cfg.Db.CreateRefreshToken(r.Context(), database.CreateRefreshTokenParams{\n\t\tUserID:    user.ID,\n\t\tToken:     refreshToken,\n\t\tExpiresAt: time.Now().UTC().Add(time.Hour * 24 * 60),\n\t})\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't save refresh token\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusOK, response{\n\t\tUser: User{\n\t\t\tID:          user.ID,\n\t\t\tCreatedAt:   user.CreatedAt,\n\t\t\tUpdatedAt:   user.UpdatedAt,\n\t\t\tEmail:       user.Email,\n\t\t\tIsChirpyRed: user.IsChirpyRed,\n\t\t},\n\t\tToken:        accessToken,\n\t\tRefreshToken: refreshToken,\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/handler_login.go","struct":{"name":"parameters","fields":[{"name":"Password","type":"string","tag":"json:\"password\""},{"name":"Email","type":"string","tag":"json:\"email\""}]}}
{"type":"struct","file_path":"../handler/handler_login.go","struct":{"name":"response","fields":[{"name":"","type":"User"},{"name":"Token","type":"string","tag":"json:\"token\""},{"name":"RefreshToken","type":"string","tag":"json:\"refresh_token\""}]}}
{"type":"function","file_path":"../handler/handler_refresh.go","function":{"name":"HandlerRefresh","signature":"func HandlerRefresh(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype response struct {\n\t\tToken string `json:\"token\"`\n\t}\n\n\trefreshToken, err := auth.GetBearerToken(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, \"Couldn't find token\", err)\n\t\treturn\n\t}\n\n\tuser, err := cfg.Db.GetUserFromRefreshToken(r.Context(), refreshToken)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't get user for refresh token\", err)\n\t\treturn\n\t}\n\n\taccessToken, err := auth.MakeJWT(\n\t\tuser.ID,\n\t\tcfg.JwtSecret,\n\t\ttime.Hour,\n\t)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't validate token\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusOK, response{\n\t\tToken: accessToken,\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/handler_refresh.go","struct":{"name":"response","fields":[{"name":"Token","type":"string","tag":"json:\"token\""}]}}
{"type":"function","file_path":"../handler/handler_refresh.go","function":{"name":"HandlerRevoke","signature":"func HandlerRevoke(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\trefreshToken, err := auth.GetBearerToken(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, \"Couldn't find token\", err)\n\t\treturn\n\t}\n\n\t_, err = cfg.Db.RevokeRefreshToken(r.Context(), refreshToken)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't revoke session\", err)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusNoContent)\n}\n"}}
{"type":"struct","file_path":"../handler/handler_users_create.go","struct":{"name":"User","fields":[{"name":"ID","type":"uuid.UUID","tag":"json:\"id\""},{"name":"CreatedAt","type":"time.Time","tag":"json:\"created_at\""},{"name":"UpdatedAt","type":"time.Time","tag":"json:\"updated_at\""},{"name":"Email","type":"string","tag":"json:\"email\""},{"name":"Password","type":"string","tag":"json:\"-\""},{"name":"IsChirpyRed","type":"bool","tag":"json:\"is_chirpy_red\""}]}}
{"type":"function","file_path":"../handler/handler_users_create.go","function":{"name":"HandlerUsersCreate","signature":"func HandlerUsersCreate(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype parameters struct {\n\t\tPassword string `json:\"password\"`\n\t\tEmail    string `json:\"email\"`\n\t}\n\ttype response struct {\n\t\tUser\n\t}\n\n\tdecoder := json.NewDecoder(r.Body)\n\tparams := parameters{}\n\terr := decoder.Decode(\u0026params)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't decode parameters\", err)\n\t\treturn\n\t}\n\n\thashedPassword, err := auth.HashPassword(params.Password)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't hash password\", err)\n\t\treturn\n\t}\n\n\tuser, err := cfg.Db.CreateUser(r.Context(), database.CreateUserParams{\n\t\tEmail:          params.Email,\n\t\tHashedPassword: hashedPassword,\n\t})\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't create user\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusCreated, response{\n\t\tUser: User{\n\t\t\tID:          user.ID,\n\t\t\tCreatedAt:   user.CreatedAt,\n\t\t\tUpdatedAt:   user.UpdatedAt,\n\t\t\tEmail:       user.Email,\n\t\t\tIsChirpyRed: user.IsChirpyRed,\n\t\t},\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/handler_users_create.go","struct":{"name":"parameters","fields":[{"name":"Password","type":"string","tag":"json:\"password\""},{"name":"Email","type":"string","tag":"json:\"email\""}]}}
{"type":"struct","file_path":"../handler/handler_users_create.go","struct":{"name":"response","fields":[{"name":"","type":"User"}]}}
{"type":"function","file_path":"../handler/handler_webhooks.go","function":{"name":"HandlerWebhook","signature":"func HandlerWebhook(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype parameters struct {\n\t\tEvent string `json:\"event\"`\n\t\tData  struct {\n\t\t\tUserID uuid.UUID `json:\"user_id\"`\n\t\t}\n\t}\n\n\tapiKey, err := auth.GetAPIKey(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't find api key\", err)\n\t\treturn\n\t}\n\tif apiKey != cfg.PolkaKey {\n\t\trespondWithError(w, http.StatusUnauthorized, \"API key is invalid\", err)\n\t\treturn\n\t}\n\n\tdecoder := json.NewDecoder(r.Body)\n\tparams := parameters{}\n\terr = decoder.Decode(\u0026params)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't decode parameters\", err)\n\t\treturn\n\t}\n\n\tif params.Event != \"user.upgraded\" {\n\t\tw.WriteHeader(http.StatusNoContent)\n\t\treturn\n\t}\n\n\t_, err = cfg.Db.UpgradeToChirpyRed(r.Context(), params.Data.UserID)\n\tif err != nil {\n\t\tif errors.Is(err, sql.ErrNoRows) {\n\t\t\trespondWithError(w, http.StatusNotFound, \"Couldn't find user\", err)\n\t\t\treturn\n\t\t}\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't update user\", err)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusNoContent)\n}\n"}}
{"type":"struct","file_path":"../handler/handler_webhooks.go","struct":{"name":"parameters","fields":[{"name":"Event","type":"string","tag":"json:\"event\""},{"name":"Data","type":"struct {\n\t\t\tUserID uuid.UUID `json:\"user_id\"`\n\t\t}"}]}}
{"type":"function","file_path":"../handler/handlers_users_update.go","function":{"name":"HandlerUsersUpdate","signature":"func HandlerUsersUpdate(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\ttype parameters struct {\n\t\tPassword string `json:\"password\"`\n\t\tEmail    string `json:\"email\"`\n\t}\n\ttype response struct {\n\t\tUser\n\t}\n\n\ttoken, err := auth.GetBearerToken(r.Header)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't find JWT\", err)\n\t\treturn\n\t}\n\tuserID, err := auth.ValidateJWT(token, cfg.JwtSecret)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusUnauthorized, \"Couldn't validate JWT\", err)\n\t\treturn\n\t}\n\n\tdecoder := json.NewDecoder(r.Body)\n\tparams := parameters{}\n\terr = decoder.Decode(\u0026params)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't decode parameters\", err)\n\t\treturn\n\t}\n\n\thashedPassword, err := auth.HashPassword(params.Password)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't hash password\", err)\n\t\treturn\n\t}\n\n\tuser, err := cfg.Db.UpdateUser(r.Context(), database.UpdateUserParams{\n\t\tID:             userID,\n\t\tEmail:          params.Email,\n\t\tHashedPassword: hashedPassword,\n\t})\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Couldn't update user\", err)\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusOK, response{\n\t\tUser: User{\n\t\t\tID:          user.ID,\n\t\t\tCreatedAt:   user.CreatedAt,\n\t\t\tUpdatedAt:   user.UpdatedAt,\n\t\t\tEmail:       user.Email,\n\t\t\tIsChirpyRed: user.IsChirpyRed,\n\t\t},\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/handlers_users_update.go","struct":{"name":"parameters","fields":[{"name":"Password","type":"string","tag":"json:\"password\""},{"name":"Email","type":"string","tag":"json:\"email\""}]}}
{"type":"struct","file_path":"../handler/handlers_users_update.go","struct":{"name":"response","fields":[{"name":"","type":"User"}]}}
{"type":"struct","file_path":"../handler/json.go","struct":{"name":"ApiConfig","fields":[{"name":"FileserverHits","type":"atomic.Int32"},{"name":"Db","type":"*database.Queries"},{"name":"Platform","type":"string"},{"name":"JwtSecret","type":"string"},{"name":"PolkaKey","type":"string"}]}}
{"type":"function","file_path":"../handler/json.go","function":{"name":"respondWithError","signature":"func respondWithError(w http.ResponseWriter, code int, msg string, err error)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"code","type":"int"},{"name":"msg","type":"string"},{"name":"err","type":"error"}],"returns":null,"body":"\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tif code \u003e 499 {\n\t\tlog.Printf(\"Responding with 5XX error: %s\", msg)\n\t}\n\ttype errorResponse struct {\n\t\tError string `json:\"error\"`\n\t}\n\trespondWithJSON(w, code, errorResponse{\n\t\tError: msg,\n\t})\n}\n"}}
{"type":"struct","file_path":"../handler/json.go","struct":{"name":"errorResponse","fields":[{"name":"Error","type":"string","tag":"json:\"error\""}]}}
{"type":"function","file_path":"../handler/json.go","function":{"name":"respondWithJSON","signature":"func respondWithJSON(w http.ResponseWriter, code int, payload interface{})","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"code","type":"int"},{"name":"payload","type":"interface{}"}],"returns":null,"body":"\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tdat, err := json.Marshal(payload)\n\tif err != nil {\n\t\tlog.Printf(\"Error marshalling JSON: %s\", err)\n\t\tw.WriteHeader(500)\n\t\treturn\n\t}\n\tw.WriteHeader(code)\n\tw.Write(dat)\n}\n"}}
{"type":"function","file_path":"../handler/metrics.go","function":{"name":"HandlerMetrics","signature":"func HandlerMetrics(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tw.Header().Add(\"Content-Type\", \"text/html\")\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(fmt.Sprintf(`\n\u003chtml\u003e\n\n\u003cbody\u003e\n\t\u003ch1\u003eWelcome, Chirpy Admin\u003c/h1\u003e\n\t\u003cp\u003eChirpy has been visited %d times!\u003c/p\u003e\n\u003c/body\u003e\n\n\u003c/html\u003e\n\t`, cfg.FileserverHits.Load())))\n}\n"}}
{"type":"function","file_path":"../handler/metrics.go","function":{"name":"MiddlewareMetricsInc","signature":"func MiddlewareMetricsInc(next http.Handler) http.Handler","parameters":[{"name":"next","type":"http.Handler"}],"returns":[{"name":"","type":"http.Handler"}],"body":"\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcfg.FileserverHits.Add(1)\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n"}}
{"type":"function","file_path":"../handler/readiness.go","function":{"name":"HandlerReadiness","signature":"func HandlerReadiness(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tw.Header().Add(\"Content-Type\", \"text/plain; charset=utf-8\")\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(http.StatusText(http.StatusOK)))\n}\n"}}
{"type":"function","file_path":"../handler/reset.go","function":{"name":"HandlerReset","signature":"func HandlerReset(w http.ResponseWriter, r *http.Request)","parameters":[{"name":"w","type":"http.ResponseWriter"},{"name":"r","type":"*http.Request"}],"returns":null,"body":"\n\tif cfg.Platform != \"dev\" {\n\t\tw.WriteHeader(http.StatusForbidden)\n\t\tw.Write([]byte(\"Reset is only allowed in dev environment.\"))\n\t\treturn\n\t}\n\n\tcfg.FileserverHits.Store(0)\n\terr := cfg.Db.Reset(r.Context())\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tw.Write([]byte(\"Failed to reset the database: \" + err.Error()))\n\t\treturn\n\t}\n\tw.WriteHeader(http.StatusOK)\n\tw.Write([]byte(\"Hits reset to 0 and database reset to initial state.\"))\n}\n"}}
{"type":"constant","file_path":"../internal/auth/auth.go","constant":{"names":["TokenTypeAccess"],"type":"TokenType","value":"\"chirpy-access\""}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"HashPassword","signature":"func HashPassword(password string) (string, error)","parameters":[{"name":"password","type":"string"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\thash, err := argon2id.CreateHash(password, argon2id.DefaultParams)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn hash, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"CheckPasswordHash","signature":"func CheckPasswordHash(password string, hash string) (bool, error)","parameters":[{"name":"password","type":"string"},{"name":"hash","type":"string"}],"returns":[{"name":"","type":"bool"},{"name":"","type":"error"}],"body":"\n\tmatch, err := argon2id.ComparePasswordAndHash(password, hash)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\treturn match, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"MakeJWT","signature":"func MakeJWT(userID uuid.UUID, tokenSecret string, expiresIn time.Duration) (string, error)","parameters":[{"name":"userID","type":"uuid.UUID"},{"name":"tokenSecret","type":"string"},{"name":"expiresIn","type":"time.Duration"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tsigningKey := []byte(tokenSecret)\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.RegisteredClaims{\n\t\tIssuer:    string(TokenTypeAccess),\n\t\tIssuedAt:  jwt.NewNumericDate(time.Now().UTC()),\n\t\tExpiresAt: jwt.NewNumericDate(time.Now().UTC().Add(expiresIn)),\n\t\tSubject:   userID.String(),\n\t})\n\treturn token.SignedString(signingKey)\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"ValidateJWT","signature":"func ValidateJWT(tokenString string, tokenSecret string) (uuid.UUID, error)","parameters":[{"name":"tokenString","type":"string"},{"name":"tokenSecret","type":"string"}],"returns":[{"name":"","type":"uuid.UUID"},{"name":"","type":"error"}],"body":"\n\tclaimsStruct := jwt.RegisteredClaims{}\n\ttoken, err := jwt.ParseWithClaims(\n\t\ttokenString,\n\t\t\u0026claimsStruct,\n\t\tfunc(token *jwt.Token) (interface{}, error) { return []byte(tokenSecret), nil },\n\t)\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\n\tuserIDString, err := token.Claims.GetSubject()\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\n\tissuer, err := token.Claims.GetIssuer()\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\tif issuer != string(TokenTypeAccess) {\n\t\treturn uuid.Nil, errors.New(\"invalid issuer\")\n\t}\n\n\tid, err := uuid.Parse(userIDString)\n\tif err != nil {\n\t\treturn uuid.Nil, fmt.Errorf(\"invalid user ID: %w\", err)\n\t}\n\treturn id, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"GetBearerToken","signature":"func GetBearerToken(headers http.Header) (string, error)","parameters":[{"name":"headers","type":"http.Header"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tauthHeader := headers.Get(\"Authorization\")\n\tif authHeader == \"\" {\n\t\treturn \"\", ErrNoAuthHeaderIncluded\n\t}\n\tsplitAuth := strings.Split(authHeader, \" \")\n\tif len(splitAuth) \u003c 2 || splitAuth[0] != \"Bearer\" {\n\t\treturn \"\", errors.New(\"malformed authorization header\")\n\t}\n\n\treturn splitAuth[1], nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"MakeRefreshToken","signature":"func MakeRefreshToken() string","parameters":null,"returns":[{"name":"","type":"string"}],"body":"\n\ttoken := make([]byte, 32)\n\trand.Read(token)\n\treturn hex.EncodeToString(token)\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"GetAPIKey","signature":"func GetAPIKey(headers http.Header) (string, error)","parameters":[{"name":"headers","type":"http.Header"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tauthHeader := headers.Get(\"Authorization\")\n\tif authHeader == \"\" {\n\t\treturn \"\", ErrNoAuthHeaderIncluded\n\t}\n\tsplitAuth := strings.Split(authHeader, \" \")\n\tif len(splitAuth) \u003c 2 || splitAuth[0] != \"ApiKey\" {\n\t\treturn \"\", errors.New(\"malformed authorization header\")\n\t}\n\n\treturn splitAuth[1], nil\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["createChirp"],"value":"`-- name: CreateChirp :one\nINSERT INTO chirps (id, created_at, updated_at, body, user_id)\nVALUES (\n    gen_random_uuid(),\n    NOW(),\n    NOW(),\n    $1,\n    $2\n)\nRETURNING id, created_at, updated_at, body, user_id\n`"}}
{"type":"struct","file_path":"../internal/database/chirps.sql.go","struct":{"name":"CreateChirpParams","fields":[{"name":"Body","type":"string"},{"name":"UserID","type":"uuid.UUID"}]}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"CreateChirp","signature":"func CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateChirpParams"}],"returns":[{"name":"","type":"Chirp"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)\n\tvar i Chirp\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Body,\n\t\t\u0026i.UserID,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["deleteChirp"],"value":"`-- name: DeleteChirp :exec\nDELETE FROM chirps\nWHERE id = $1\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"DeleteChirp","signature":"func DeleteChirp(ctx context.Context, id uuid.UUID) error","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"error"}],"body":"\n\t_, err := q.db.ExecContext(ctx, deleteChirp, id)\n\treturn err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["getChirp"],"value":"`-- name: GetChirp :one\nSELECT id, created_at, updated_at, body, user_id FROM chirps\nWHERE id = $1\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"GetChirp","signature":"func GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"Chirp"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getChirp, id)\n\tvar i Chirp\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Body,\n\t\t\u0026i.UserID,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["getChirps"],"value":"`-- name: GetChirps :many\nSELECT id, created_at, updated_at, body, user_id FROM chirps\nORDER BY created_at ASC\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"GetChirps","signature":"func GetChirps(ctx context.Context) ([]Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"}],"returns":[{"name":"","type":"[]Chirp"},{"name":"","type":"error"}],"body":"\n\trows, err := q.db.QueryContext(ctx, getChirps)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []Chirp\n\tfor rows.Next() {\n\t\tvar i Chirp\n\t\tif err := rows.Scan(\n\t\t\t\u0026i.ID,\n\t\t\t\u0026i.CreatedAt,\n\t\t\t\u0026i.UpdatedAt,\n\t\t\t\u0026i.Body,\n\t\t\t\u0026i.UserID,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n"}}
{"type":"function","file_path":"../internal/database/db.go","function":{"name":"New","signature":"func New(db DBTX) *Queries","parameters":[{"name":"db","type":"DBTX"}],"returns":[{"name":"","type":"*Queries"}],"body":"\n\treturn \u0026Queries{db: db}\n}\n"}}
{"type":"struct","file_path":"../internal/database/db.go","struct":{"name":"Queries","fields":[{"name":"db","type":"DBTX"}]}}
{"type":"function","file_path":"../internal/database/db.go","function":{"name":"WithTx","signature":"func WithTx(tx *sql.Tx) *Queries","parameters":[{"name":"tx","type":"*sql.Tx"}],"returns":[{"name":"","type":"*Queries"}],"body":"\n\treturn \u0026Queries{\n\t\tdb: tx,\n\t}\n}\n"}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"Chirp","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"Body","type":"string"},{"name":"UserID","type":"uuid.UUID"}]}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"RefreshToken","fields":[{"name":"Token","type":"string"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"UserID","type":"uuid.UUID"},{"name":"ExpiresAt","type":"time.Time"},{"name":"RevokedAt","type":"sql.NullTime"}]}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"User","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"},{"name":"IsChirpyRed","type":"bool"}]}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["createRefreshToken"],"value":"`-- name: CreateRefreshToken :one\nINSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)\nVALUES (\n    $1,\n    NOW(),\n    NOW(),\n    $2,\n    $3\n)\nRETURNING token, created_at, updated_at, user_id, expires_at, revoked_at\n`"}}
{"type":"struct","file_path":"../internal/database/refresh_tokens.sql.go","struct":{"name":"CreateRefreshTokenParams","fields":[{"name":"Token","type":"string"},{"name":"UserID","type":"uuid.UUID"},{"name":"ExpiresAt","type":"time.Time"}]}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"CreateRefreshToken","signature":"func CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateRefreshTokenParams"}],"returns":[{"name":"","type":"RefreshToken"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)\n\tvar i RefreshToken\n\terr := row.Scan(\n\t\t\u0026i.Token,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.UserID,\n\t\t\u0026i.ExpiresAt,\n\t\t\u0026i.RevokedAt,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["getUserFromRefreshToken"],"value":"`-- name: GetUserFromRefreshToken :one\nSELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password, users.is_chirpy_red FROM users\nJOIN refresh_tokens ON users.id = refresh_tokens.user_id\nWHERE refresh_tokens.token = $1\nAND revoked_at IS NULL\nAND expires_at \u003e NOW()\n`"}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"GetUserFromRefreshToken","signature":"func GetUserFromRefreshToken(ctx context.Context, token string) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"token","type":"string"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["revokeRefreshToken"],"value":"`-- name: RevokeRefreshToken :one\nUPDATE refresh_tokens SET revoked_at = NOW(),\nupdated_at = NOW()\nWHERE token = $1\nRETURNING token, created_at, updated_at, user_id, expires_at, revoked_at\n`"}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"RevokeRefreshToken","signature":"func RevokeRefreshToken(ctx context.Context, token string) (RefreshToken, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"token","type":"string"}],"returns":[{"name":"","type":"RefreshToken"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, revokeRefreshToken, token)\n\tvar i RefreshToken\n\terr := row.Scan(\n\t\t\u0026i.Token,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.UserID,\n\t\t\u0026i.ExpiresAt,\n\t\t\u0026i.RevokedAt,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/reset.sql.go","constant":{"names":["reset"],"value":"`-- name: Reset :exec\nDELETE FROM users\n`"}}
{"type":"function","file_path":"../internal/database/reset.sql.go","function":{"name":"Reset","signature":"func Reset(ctx context.Context) error","parameters":[{"name":"ctx","type":"context.Context"}],"returns":[{"name":"","type":"error"}],"body":"\n\t_, err := q.db.ExecContext(ctx, reset)\n\treturn err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["createUser"],"value":"`-- name: CreateUser :one\nINSERT INTO users (id, created_at, updated_at, email, hashed_password)\nVALUES (\n    gen_random_uuid(),\n    NOW(),\n    NOW(),\n    $1,\n    $2\n)\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"struct","file_path":"../internal/database/users.sql.go","struct":{"name":"CreateUserParams","fields":[{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"}]}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"CreateUser","signature":"func CreateUser(ctx context.Context, arg CreateUserParams) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateUserParams"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["getUserByEmail"],"value":"`-- name: GetUserByEmail :one\nSELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users\nWHERE email = $1\n`"}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"GetUserByEmail","signature":"func GetUserByEmail(ctx context.Context, email string) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"email","type":"string"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getUserByEmail, email)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["updateUser"],"value":"`-- name: UpdateUser :one\nUPDATE users SET email = $2, hashed_password = $3, updated_at = NOW()\nWHERE id = $1\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"struct","file_path":"../internal/database/users.sql.go","struct":{"name":"UpdateUserParams","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"}]}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"UpdateUser","signature":"func UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"UpdateUserParams"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["upgradeToChirpyRed"],"value":"`-- name: UpgradeToChirpyRed :one\nUPDATE users SET is_chirpy_red = true, updated_at = NOW()\nWHERE id = $1\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"UpgradeToChirpyRed","signature":"func UpgradeToChirpyRed(ctx context.Context, id uuid.UUID) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, upgradeToChirpyRed, id)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"function","file_path":"../main.go","function":{"name":"main","signature":"func main()","parameters":null,"returns":null,"body":"\n\tconst filepathRoot = \".\"\n\tconst port = \"8080\"\n\n\tgodotenv.Load()\n\tdbURL := os.Getenv(\"DB_URL\")\n\tif dbURL == \"\" {\n\t\tlog.Fatal(\"DB_URL must be set\")\n\t}\n\tPlatform := os.Getenv(\"PLATFORM\")\n\tif Platform == \"\" {\n\t\tlog.Fatal(\"PLATFORM must be set\")\n\t}\n\tJwtSecret := os.Getenv(\"JWT_SECRET\")\n\tif JwtSecret == \"\" {\n\t\tlog.Fatal(\"JWT_SECRET environment variable is not set\")\n\t}\n\tPolkaKey := os.Getenv(\"POLKA_KEY\")\n\tif PolkaKey == \"\" {\n\t\tlog.Fatal(\"POLKA_KEY environment variable is not set\")\n\t}\n\n\tdbConn, err := sql.Open(\"postgres\", dbURL)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error opening database: %s\", err)\n\t}\n\tdbQueries := database.New(dbConn)\n\n\tApiCfg := \u0026handler.ApiConfig{\n\t\tFileserverHits: atomic.Int32{},\n\t\tDb:             dbQueries,\n\t\tPlatform:       Platform,\n\t\tJwtSecret:      JwtSecret,\n\t\tPolkaKey:       PolkaKey,\n\t}\n\n\tmux := http.NewServeMux()\n\tfsHandler := ApiCfg.MiddlewareMetricsInc(http.StripPrefix(\"/app\", http.FileServer(http.Dir(filepathRoot))))\n\tmux.Handle(\"/app/\", fsHandler)\n\n\tmux.HandleFunc(\"GET /api/healthz\", handler.HandlerReadiness)\n\n\tmux.HandleFunc(\"POST /api/polka/webhooks\", ApiCfg.HandlerWebhook)\n\n\tmux.HandleFunc(\"POST /api/login\", ApiCfg.HandlerLogin)\n\tmux.HandleFunc(\"POST /api/refresh\", ApiCfg.HandlerRefresh)\n\tmux.HandleFunc(\"POST /api/revoke\", ApiCfg.HandlerRevoke)\n\n\tmux.HandleFunc(\"POST /api/users\", ApiCfg.HandlerUsersCreate)\n\tmux.HandleFunc(\"PUT /api/users\", ApiCfg.HandlerUsersUpdate)\n\n\tmux.HandleFunc(\"POST /api/chirps\", ApiCfg.HandlerChirpsCreate)\n\tmux.HandleFunc(\"GET /api/chirps\", ApiCfg.HandlerChirpsRetrieve)\n\tmux.HandleFunc(\"GET /api/chirps/{chirpID}\", ApiCfg.HandlerChirpsGet)\n\tmux.HandleFunc(\"DELETE /api/chirps/{chirpID}\", ApiCfg.HandlerChirpsDelete)\n\n\tmux.HandleFunc(\"POST /admin/reset\", ApiCfg.HandlerReset)\n\tmux.HandleFunc(\"GET /admin/metrics\", ApiCfg.HandlerMetrics)\n\n\tsrv := \u0026http.Server{\n\t\tAddr:    \":\" + port,\n\t\tHandler: mux,\n\t}\n\n\tlog.Printf(\"Serving on port: %s\\n\", port)\n\tlog.Fatal(srv.ListenAndServe())\n}\n"}}
{"type":"constant","file_path":"../main.go","constant":{"names":["filepathRoot"],"value":"\".\""}}
{"type":"constant","file_path":"../main.go","constant":{"names":["port"],"value":"\"8080\""}}
{"type":"constant","file_path":"../internal/auth/auth.go","constant":{"names":["TokenTypeAccess"],"type":"TokenType","value":"\"chirpy-access\""}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"HashPassword","signature":"func HashPassword(password string) (string, error)","parameters":[{"name":"password","type":"string"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\thash, err := argon2id.CreateHash(password, argon2id.DefaultParams)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn hash, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"CheckPasswordHash","signature":"func CheckPasswordHash(password string, hash string) (bool, error)","parameters":[{"name":"password","type":"string"},{"name":"hash","type":"string"}],"returns":[{"name":"","type":"bool"},{"name":"","type":"error"}],"body":"\n\tmatch, err := argon2id.ComparePasswordAndHash(password, hash)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\treturn match, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"MakeJWT","signature":"func MakeJWT(userID uuid.UUID, tokenSecret string, expiresIn time.Duration) (string, error)","parameters":[{"name":"userID","type":"uuid.UUID"},{"name":"tokenSecret","type":"string"},{"name":"expiresIn","type":"time.Duration"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tsigningKey := []byte(tokenSecret)\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.RegisteredClaims{\n\t\tIssuer:    string(TokenTypeAccess),\n\t\tIssuedAt:  jwt.NewNumericDate(time.Now().UTC()),\n\t\tExpiresAt: jwt.NewNumericDate(time.Now().UTC().Add(expiresIn)),\n\t\tSubject:   userID.String(),\n\t})\n\treturn token.SignedString(signingKey)\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"ValidateJWT","signature":"func ValidateJWT(tokenString string, tokenSecret string) (uuid.UUID, error)","parameters":[{"name":"tokenString","type":"string"},{"name":"tokenSecret","type":"string"}],"returns":[{"name":"","type":"uuid.UUID"},{"name":"","type":"error"}],"body":"\n\tclaimsStruct := jwt.RegisteredClaims{}\n\ttoken, err := jwt.ParseWithClaims(\n\t\ttokenString,\n\t\t\u0026claimsStruct,\n\t\tfunc(token *jwt.Token) (interface{}, error) { return []byte(tokenSecret), nil },\n\t)\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\n\tuserIDString, err := token.Claims.GetSubject()\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\n\tissuer, err := token.Claims.GetIssuer()\n\tif err != nil {\n\t\treturn uuid.Nil, err\n\t}\n\tif issuer != string(TokenTypeAccess) {\n\t\treturn uuid.Nil, errors.New(\"invalid issuer\")\n\t}\n\n\tid, err := uuid.Parse(userIDString)\n\tif err != nil {\n\t\treturn uuid.Nil, fmt.Errorf(\"invalid user ID: %w\", err)\n\t}\n\treturn id, nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"GetBearerToken","signature":"func GetBearerToken(headers http.Header) (string, error)","parameters":[{"name":"headers","type":"http.Header"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tauthHeader := headers.Get(\"Authorization\")\n\tif authHeader == \"\" {\n\t\treturn \"\", ErrNoAuthHeaderIncluded\n\t}\n\tsplitAuth := strings.Split(authHeader, \" \")\n\tif len(splitAuth) \u003c 2 || splitAuth[0] != \"Bearer\" {\n\t\treturn \"\", errors.New(\"malformed authorization header\")\n\t}\n\n\treturn splitAuth[1], nil\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"MakeRefreshToken","signature":"func MakeRefreshToken() string","parameters":null,"returns":[{"name":"","type":"string"}],"body":"\n\ttoken := make([]byte, 32)\n\trand.Read(token)\n\treturn hex.EncodeToString(token)\n}\n"}}
{"type":"function","file_path":"../internal/auth/auth.go","function":{"name":"GetAPIKey","signature":"func GetAPIKey(headers http.Header) (string, error)","parameters":[{"name":"headers","type":"http.Header"}],"returns":[{"name":"","type":"string"},{"name":"","type":"error"}],"body":"\n\tauthHeader := headers.Get(\"Authorization\")\n\tif authHeader == \"\" {\n\t\treturn \"\", ErrNoAuthHeaderIncluded\n\t}\n\tsplitAuth := strings.Split(authHeader, \" \")\n\tif len(splitAuth) \u003c 2 || splitAuth[0] != \"ApiKey\" {\n\t\treturn \"\", errors.New(\"malformed authorization header\")\n\t}\n\n\treturn splitAuth[1], nil\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["createChirp"],"value":"`-- name: CreateChirp :one\nINSERT INTO chirps (id, created_at, updated_at, body, user_id)\nVALUES (\n    gen_random_uuid(),\n    NOW(),\n    NOW(),\n    $1,\n    $2\n)\nRETURNING id, created_at, updated_at, body, user_id\n`"}}
{"type":"struct","file_path":"../internal/database/chirps.sql.go","struct":{"name":"CreateChirpParams","fields":[{"name":"Body","type":"string"},{"name":"UserID","type":"uuid.UUID"}]}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"CreateChirp","signature":"func CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateChirpParams"}],"returns":[{"name":"","type":"Chirp"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)\n\tvar i Chirp\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Body,\n\t\t\u0026i.UserID,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["deleteChirp"],"value":"`-- name: DeleteChirp :exec\nDELETE FROM chirps\nWHERE id = $1\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"DeleteChirp","signature":"func DeleteChirp(ctx context.Context, id uuid.UUID) error","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"error"}],"body":"\n\t_, err := q.db.ExecContext(ctx, deleteChirp, id)\n\treturn err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["getChirp"],"value":"`-- name: GetChirp :one\nSELECT id, created_at, updated_at, body, user_id FROM chirps\nWHERE id = $1\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"GetChirp","signature":"func GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"Chirp"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getChirp, id)\n\tvar i Chirp\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Body,\n\t\t\u0026i.UserID,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/chirps.sql.go","constant":{"names":["getChirps"],"value":"`-- name: GetChirps :many\nSELECT id, created_at, updated_at, body, user_id FROM chirps\nORDER BY created_at ASC\n`"}}
{"type":"function","file_path":"../internal/database/chirps.sql.go","function":{"name":"GetChirps","signature":"func GetChirps(ctx context.Context) ([]Chirp, error)","parameters":[{"name":"ctx","type":"context.Context"}],"returns":[{"name":"","type":"[]Chirp"},{"name":"","type":"error"}],"body":"\n\trows, err := q.db.QueryContext(ctx, getChirps)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\tvar items []Chirp\n\tfor rows.Next() {\n\t\tvar i Chirp\n\t\tif err := rows.Scan(\n\t\t\t\u0026i.ID,\n\t\t\t\u0026i.CreatedAt,\n\t\t\t\u0026i.UpdatedAt,\n\t\t\t\u0026i.Body,\n\t\t\t\u0026i.UserID,\n\t\t); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\titems = append(items, i)\n\t}\n\tif err := rows.Close(); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := rows.Err(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn items, nil\n}\n"}}
{"type":"function","file_path":"../internal/database/db.go","function":{"name":"New","signature":"func New(db DBTX) *Queries","parameters":[{"name":"db","type":"DBTX"}],"returns":[{"name":"","type":"*Queries"}],"body":"\n\treturn \u0026Queries{db: db}\n}\n"}}
{"type":"struct","file_path":"../internal/database/db.go","struct":{"name":"Queries","fields":[{"name":"db","type":"DBTX"}]}}
{"type":"function","file_path":"../internal/database/db.go","function":{"name":"WithTx","signature":"func WithTx(tx *sql.Tx) *Queries","parameters":[{"name":"tx","type":"*sql.Tx"}],"returns":[{"name":"","type":"*Queries"}],"body":"\n\treturn \u0026Queries{\n\t\tdb: tx,\n\t}\n}\n"}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"Chirp","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"Body","type":"string"},{"name":"UserID","type":"uuid.UUID"}]}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"RefreshToken","fields":[{"name":"Token","type":"string"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"UserID","type":"uuid.UUID"},{"name":"ExpiresAt","type":"time.Time"},{"name":"RevokedAt","type":"sql.NullTime"}]}}
{"type":"struct","file_path":"../internal/database/models.go","struct":{"name":"User","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"CreatedAt","type":"time.Time"},{"name":"UpdatedAt","type":"time.Time"},{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"},{"name":"IsChirpyRed","type":"bool"}]}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["createRefreshToken"],"value":"`-- name: CreateRefreshToken :one\nINSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at)\nVALUES (\n    $1,\n    NOW(),\n    NOW(),\n    $2,\n    $3\n)\nRETURNING token, created_at, updated_at, user_id, expires_at, revoked_at\n`"}}
{"type":"struct","file_path":"../internal/database/refresh_tokens.sql.go","struct":{"name":"CreateRefreshTokenParams","fields":[{"name":"Token","type":"string"},{"name":"UserID","type":"uuid.UUID"},{"name":"ExpiresAt","type":"time.Time"}]}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"CreateRefreshToken","signature":"func CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateRefreshTokenParams"}],"returns":[{"name":"","type":"RefreshToken"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)\n\tvar i RefreshToken\n\terr := row.Scan(\n\t\t\u0026i.Token,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.UserID,\n\t\t\u0026i.ExpiresAt,\n\t\t\u0026i.RevokedAt,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["getUserFromRefreshToken"],"value":"`-- name: GetUserFromRefreshToken :one\nSELECT users.id, users.created_at, users.updated_at, users.email, users.hashed_password, users.is_chirpy_red FROM users\nJOIN refresh_tokens ON users.id = refresh_tokens.user_id\nWHERE refresh_tokens.token = $1\nAND revoked_at IS NULL\nAND expires_at \u003e NOW()\n`"}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"GetUserFromRefreshToken","signature":"func GetUserFromRefreshToken(ctx context.Context, token string) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"token","type":"string"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/refresh_tokens.sql.go","constant":{"names":["revokeRefreshToken"],"value":"`-- name: RevokeRefreshToken :one\nUPDATE refresh_tokens SET revoked_at = NOW(),\nupdated_at = NOW()\nWHERE token = $1\nRETURNING token, created_at, updated_at, user_id, expires_at, revoked_at\n`"}}
{"type":"function","file_path":"../internal/database/refresh_tokens.sql.go","function":{"name":"RevokeRefreshToken","signature":"func RevokeRefreshToken(ctx context.Context, token string) (RefreshToken, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"token","type":"string"}],"returns":[{"name":"","type":"RefreshToken"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, revokeRefreshToken, token)\n\tvar i RefreshToken\n\terr := row.Scan(\n\t\t\u0026i.Token,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.UserID,\n\t\t\u0026i.ExpiresAt,\n\t\t\u0026i.RevokedAt,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/reset.sql.go","constant":{"names":["reset"],"value":"`-- name: Reset :exec\nDELETE FROM users\n`"}}
{"type":"function","file_path":"../internal/database/reset.sql.go","function":{"name":"Reset","signature":"func Reset(ctx context.Context) error","parameters":[{"name":"ctx","type":"context.Context"}],"returns":[{"name":"","type":"error"}],"body":"\n\t_, err := q.db.ExecContext(ctx, reset)\n\treturn err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["createUser"],"value":"`-- name: CreateUser :one\nINSERT INTO users (id, created_at, updated_at, email, hashed_password)\nVALUES (\n    gen_random_uuid(),\n    NOW(),\n    NOW(),\n    $1,\n    $2\n)\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"struct","file_path":"../internal/database/users.sql.go","struct":{"name":"CreateUserParams","fields":[{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"}]}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"CreateUser","signature":"func CreateUser(ctx context.Context, arg CreateUserParams) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"CreateUserParams"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["getUserByEmail"],"value":"`-- name: GetUserByEmail :one\nSELECT id, created_at, updated_at, email, hashed_password, is_chirpy_red FROM users\nWHERE email = $1\n`"}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"GetUserByEmail","signature":"func GetUserByEmail(ctx context.Context, email string) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"email","type":"string"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, getUserByEmail, email)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["updateUser"],"value":"`-- name: UpdateUser :one\nUPDATE users SET email = $2, hashed_password = $3, updated_at = NOW()\nWHERE id = $1\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"struct","file_path":"../internal/database/users.sql.go","struct":{"name":"UpdateUserParams","fields":[{"name":"ID","type":"uuid.UUID"},{"name":"Email","type":"string"},{"name":"HashedPassword","type":"string"}]}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"UpdateUser","signature":"func UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"arg","type":"UpdateUserParams"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
{"type":"constant","file_path":"../internal/database/users.sql.go","constant":{"names":["upgradeToChirpyRed"],"value":"`-- name: UpgradeToChirpyRed :one\nUPDATE users SET is_chirpy_red = true, updated_at = NOW()\nWHERE id = $1\nRETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red\n`"}}
{"type":"function","file_path":"../internal/database/users.sql.go","function":{"name":"UpgradeToChirpyRed","signature":"func UpgradeToChirpyRed(ctx context.Context, id uuid.UUID) (User, error)","parameters":[{"name":"ctx","type":"context.Context"},{"name":"id","type":"uuid.UUID"}],"returns":[{"name":"","type":"User"},{"name":"","type":"error"}],"body":"\n\trow := q.db.QueryRowContext(ctx, upgradeToChirpyRed, id)\n\tvar i User\n\terr := row.Scan(\n\t\t\u0026i.ID,\n\t\t\u0026i.CreatedAt,\n\t\t\u0026i.UpdatedAt,\n\t\t\u0026i.Email,\n\t\t\u0026i.HashedPassword,\n\t\t\u0026i.IsChirpyRed,\n\t)\n\treturn i, err\n}\n"}}
